// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum EventCategory {
  Training
  Friendly
  League
  Championship
}

enum TicketCategory {
  North
  East
  South
  West
}

enum OrderStatus {
  Unpaid
  Paid
  Canceled
}

enum RatingRange {
  One    @map("1")
  Two    @map("2")
  Three  @map("3")
  Four   @map("4")
  Delete @map("5")
}

model Organizer {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  password   String
  avatar     String?  @default("https://res.cloudinary.com/doiygpguv/image/upload/v1734129888/organizer-default-avatar_bm5kg0.png")
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Event Event[]
}

model Event {
  id          String        @id @default(uuid())
  title       String
  category    EventCategory
  description String
  image       String
  location    String
  venue       String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  organizerId Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  Ticket Ticket[]
  Review Review[]

  organizer Organizer @relation(fields: [organizerId], references: [id])
}

model Ticket {
  id          Int            @id @default(autoincrement())
  category    TicketCategory
  description String
  price       Int
  quantity    Int
  eventId     String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  OrderDetail OrderDetail[]

  event Event @relation(fields: [eventId], references: [id])
}

model Customer {
  id             Int      @id @default(autoincrement())
  fullname       String
  username       String
  email          String   @unique
  password       String
  avatar         String?  @default("https://res.cloudinary.com/doiygpguv/image/upload/v1734129888/customer-default-avatar_kas8rt.png")
  isVerified     Boolean  @default(false)
  referralCode   String?  @unique
  referralCodeBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  CustomerCoupon CustomerCoupon?
  CustomerPoint  CustomerPoint[]
  Order          Order[]
  Review         Review[]
}

model CustomerCoupon {
  customerId Int      @id
  percentage Int      @default(10)
  isRedeem   Boolean
  expiredAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])
}

model CustomerPoint {
  id         Int      @id @default(autoincrement())
  point      Int      @default(10000)
  isUsed     Boolean  @default(false)
  customerId Int
  expiredAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])
}

model Order {
  id         Int         @id @default(autoincrement())
  customerId Int
  totalPrice Int
  finalPrice Int
  status     OrderStatus @default(Unpaid)
  expiredAt  DateTime
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  customer    Customer      @relation(fields: [customerId], references: [id])
  OrderDetail OrderDetail[]
}

model OrderDetail {
  orderId       Int
  ticketId      Int
  quantity      Int
  subTotalPrice Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  order  Order  @relation(fields: [orderId], references: [id])
  ticket Ticket @relation(fields: [ticketId], references: [id])

  @@id([ticketId, orderId])
}

model Review {
  customerId Int
  eventId    String
  review     String
  rating     RatingRange
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  event    Event    @relation(fields: [eventId], references: [id])
  customer Customer @relation(fields: [customerId], references: [id])

  @@id([eventId, customerId])
}
